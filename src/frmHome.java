
import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.rdf.model.InfModel;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.NodeIterator;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.ResourceFactory;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import eu.larkc.csparql.cep.api.RdfStream;
import eu.larkc.csparql.common.RDFTable;
import eu.larkc.csparql.core.engine.CsparqlEngine;
import eu.larkc.csparql.core.engine.CsparqlEngineImpl;
import eu.larkc.csparql.core.engine.CsparqlQueryResultProxy;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class frmHome extends javax.swing.JFrame {
    
    boolean door_leaking,window_leaking,coolant_on,heater_on;
    boolean is_base_ontology_loaded=false;
    
    static Logger logger;
    CsparqlEngine engine;
    
    InfModel infModel;
    final String BASE="http://localhost:8080/smartSpace#";
    final String BASE1="http://localhost:8080/smartSpace/";
    String analysisText="",CSparqlQueryAnalysisText="",processingAnalysisText="",latencyAnalysisText="";
    String saveRuleAnalysisText,inferenceRule;
    String winterAnalysis="",springAnalysis="",summerAnalysis="",autumAnalysis="",heatAnalysis="",coolantAnalysis="",heatcoolantAnalysis="",consistencyAnalysis="",humidityAnalysis="";
    
    
    OntModel historicaldModel=ModelFactory.createOntologyModel(OntModelSpec.RDFS_MEM);
    OntModel base_ontology;
    
    InputStream inputStream=null;
    String language_RDF="RDF/XML",language_TURTLE="TURTLE",language_NTriple="N-TRIPLES",language_N3="N3";
//    static String smartSpaceRDF= "C:\\Users\\user\\Documents\\SmartSUM\\dataset\\smartSpace.rdf";
    String smartSpaceRDF= "C:\\Users\\user\\Documents\\SmartSUM\\ontologies\\smartSpace.rdf";
    String base_ontlogy_URI;

    OntClass historicalTempValue;
    OntClass historicalHumidityValue;
    OntClass historicalPressureValue;
    OntClass superClass;
        
    Individual historicalTempReadings;
    Individual historicalHumidityReadings;
    Individual historicalPressureReading;
    
    RdfStream tg = null;
    RdfStream tg2 = null;
    RdfStream tg3 = null;
    RdfStream tg4 = null;
    RdfStream tg5 = null;
    RdfStream tg6 = null;
    
    Thread t,t2,t3,t4,t5,t6;
    float streaming_duration;
    
    CsparqlQueryResultProxy c1 = null;
    
    String csparql_query;
    Instant beforeQuery=null;
    int cycleCount=0,roomSize,season;
    
    
    
    /**
     * Creates new form frmHome
     */
    public frmHome() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txt_add_controller = new javax.swing.JTextField();
        btn_add_controller = new javax.swing.JButton();
        cmb_controller_list = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txt_add_actuator = new javax.swing.JTextField();
        btn_add_actuator = new javax.swing.JButton();
        cmb_actuator_list = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        txt_add_sensor = new javax.swing.JTextField();
        btn_add_sensor = new javax.swing.JButton();
        cmb_sensor_list = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txt_remove_class = new javax.swing.JTextField();
        btn_remove_class = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        chck_remote_control = new javax.swing.JCheckBox();
        chck_tablet_pc = new javax.swing.JCheckBox();
        chck_compsite_device = new javax.swing.JCheckBox();
        chck_door_control = new javax.swing.JCheckBox();
        chck_window_control = new javax.swing.JCheckBox();
        btn_add_more_controller = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txt_remove_controller = new javax.swing.JTextField();
        btn_remove_controller = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_selected_controllers = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        chck_door_leaking = new javax.swing.JCheckBox();
        chck_window_leaking = new javax.swing.JCheckBox();
        chck_heat_regulator = new javax.swing.JCheckBox();
        chck_coolant = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        txt_streaming_duration = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        pnl_status_bar = new javax.swing.JPanel();
        lbl_status_bar = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuitm_load_base_ontology = new javax.swing.JMenuItem();
        mnuItmStartStreamer = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Controllers"));

        jLabel6.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel6.setText("Add New Controller");

        btn_add_controller.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        btn_add_controller.setText("Add");
        btn_add_controller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_controllerActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel8.setText("Controllers:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_controller_list, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(txt_add_controller, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btn_add_controller, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addGap(2, 2, 2)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_add_controller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_add_controller)
                    .addComponent(cmb_controller_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Actuators"));

        jLabel10.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel10.setText("Add New Actuator");

        btn_add_actuator.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        btn_add_actuator.setText("Add");
        btn_add_actuator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_actuatorActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel11.setText("Actuators");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_actuator_list, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(txt_add_actuator, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btn_add_actuator, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(2, 2, 2)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_add_actuator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_add_actuator)
                    .addComponent(cmb_actuator_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Sensors"));

        jLabel14.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel14.setText("Add New Sensor");

        btn_add_sensor.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        btn_add_sensor.setText("Add");
        btn_add_sensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_sensorActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel15.setText("Sensors");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_sensor_list, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(txt_add_sensor, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btn_add_sensor, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addGap(2, 2, 2)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_add_sensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_add_sensor)
                    .addComponent(cmb_sensor_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Update Ontology"));

        jLabel16.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel16.setText("Class Name");

        btn_remove_class.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        btn_remove_class.setText("Remove");
        btn_remove_class.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_remove_classActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_remove_class, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_remove_class, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txt_remove_class, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btn_remove_class))
        );

        jButton5.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton5.setText("Next");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton5)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5))
        );

        jTabbedPane1.addTab("tab2", jPanel2);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Rule"));

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Humidity Sensor"));

        jLabel4.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel4.setText("Min Humidity (%)");

        jLabel7.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel7.setText("Max Humidity (%)");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Temperature Sensor"));

        jLabel9.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel9.setText("Min Temperature (°C)");

        jLabel12.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel12.setText("Max Temperature (°C)");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel9)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel12)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Pressure Sensor"));

        jLabel13.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel13.setText("Min Pressure (mmHg)");

        jLabel17.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel17.setText("Max Pressure (mmHg)");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel13)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel17)
                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Rule Selection"));

        jLabel18.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel18.setText("Choose Rule");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Plausibility Check", "Consistency Check", "Incompleteness Check" }));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton2.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton2.setText("Back");

        jButton3.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton3.setText("Next");

        jButton4.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton4.setText("View Rule");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(174, 174, 174)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab4", jPanel9);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Controllers"));

        chck_remote_control.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        chck_remote_control.setText("Remote Control");
        chck_remote_control.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chck_remote_controlItemStateChanged(evt);
            }
        });

        chck_tablet_pc.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        chck_tablet_pc.setText("Tablet PC");
        chck_tablet_pc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chck_tablet_pcItemStateChanged(evt);
            }
        });

        chck_compsite_device.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        chck_compsite_device.setText("Composite Device");

        chck_door_control.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        chck_door_control.setText("Door Control");

        chck_window_control.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        chck_window_control.setText("Window Control");

        btn_add_more_controller.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        btn_add_more_controller.setText("Add More");

        jLabel5.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel5.setText("Remove");

        btn_remove_controller.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        btn_remove_controller.setText("Remove");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chck_remote_control, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chck_tablet_pc, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chck_door_control, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chck_window_control, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chck_compsite_device, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(txt_remove_controller, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_add_more_controller)
                            .addComponent(btn_remove_controller)))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chck_remote_control)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chck_tablet_pc)
                .addGap(16, 16, 16)
                .addComponent(chck_compsite_device)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chck_door_control)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(chck_window_control))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btn_add_more_controller)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_remove_controller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_remove_controller))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel3.setText("Selected Controllers");

        txt_selected_controllers.setEditable(false);
        txt_selected_controllers.setColumns(20);
        txt_selected_controllers.setRows(5);
        jScrollPane1.setViewportView(txt_selected_controllers);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(231, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab3", jPanel4);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings for streamer"));

        chck_door_leaking.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        chck_door_leaking.setText("Door Opened");
        chck_door_leaking.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chck_door_leakingItemStateChanged(evt);
            }
        });

        chck_window_leaking.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        chck_window_leaking.setText("Window Opened");
        chck_window_leaking.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chck_window_leakingItemStateChanged(evt);
            }
        });

        chck_heat_regulator.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        chck_heat_regulator.setText("Heater ON");
        chck_heat_regulator.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chck_heat_regulatorItemStateChanged(evt);
            }
        });

        chck_coolant.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        chck_coolant.setText("Coolant ON");
        chck_coolant.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chck_coolantItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel1.setText("Streaming Duration");

        txt_streaming_duration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_streaming_durationKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 10)); // NOI18N
        jLabel2.setText("hour(s)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chck_window_leaking, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chck_door_leaking, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chck_heat_regulator, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chck_coolant, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_streaming_duration, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(264, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(chck_door_leaking)
                .addGap(18, 18, 18)
                .addComponent(chck_window_leaking)
                .addGap(18, 18, 18)
                .addComponent(chck_heat_regulator)
                .addGap(18, 18, 18)
                .addComponent(chck_coolant)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_streaming_duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton1.setText("Start streamers");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane1.addTab("tab1", jPanel1);

        pnl_status_bar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbl_status_bar.setText("Status");

        javax.swing.GroupLayout pnl_status_barLayout = new javax.swing.GroupLayout(pnl_status_bar);
        pnl_status_bar.setLayout(pnl_status_barLayout);
        pnl_status_barLayout.setHorizontalGroup(
            pnl_status_barLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_status_barLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_status_bar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_status_barLayout.setVerticalGroup(
            pnl_status_barLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_status_barLayout.createSequentialGroup()
                .addComponent(lbl_status_bar)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        mnuitm_load_base_ontology.setText("Load Base Ontology");
        mnuitm_load_base_ontology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitm_load_base_ontologyActionPerformed(evt);
            }
        });
        jMenu1.add(mnuitm_load_base_ontology);

        mnuItmStartStreamer.setText("Start Streamers");
        jMenu1.add(mnuItmStartStreamer);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_status_bar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_status_bar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void chck_door_leakingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chck_door_leakingItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()== ItemEvent.SELECTED){
            //JOptionPane.showConfirmDialog(this, "Item selected");
            door_leaking=true;
            lbl_status_bar.setText("Door Leaking checked");
        }else{
            door_leaking=false;
            lbl_status_bar.setText("Door Leaking unchecked");
        }
         //JOptionPane.showMessageDialog(this, doorleaking);
        
    }//GEN-LAST:event_chck_door_leakingItemStateChanged

    private void chck_window_leakingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chck_window_leakingItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()== ItemEvent.SELECTED){
            //JOptionPane.showConfirmDialog(this, "Item selected");
            window_leaking=true;
            lbl_status_bar.setText("Window Leaking checked");
        }else{
            window_leaking=false;
            lbl_status_bar.setText("Window Leaking unchecked");
        }
    }//GEN-LAST:event_chck_window_leakingItemStateChanged

    private void chck_heat_regulatorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chck_heat_regulatorItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()== ItemEvent.SELECTED){
            //JOptionPane.showConfirmDialog(this, "Item selected");
            heater_on=true;
            lbl_status_bar.setText("Heater checked");
        }else{
            heater_on=false;
            lbl_status_bar.setText("Heater unchecked");
        }
    }//GEN-LAST:event_chck_heat_regulatorItemStateChanged

    private void chck_coolantItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chck_coolantItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()== ItemEvent.SELECTED){
            //JOptionPane.showConfirmDialog(this, "Item selected");
            coolant_on=true;
            lbl_status_bar.setText("Coolant checked");
        }else{
            coolant_on=false;
            lbl_status_bar.setText("Coolant unchecked");
        }
    }//GEN-LAST:event_chck_coolantItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(!"".equals(txt_streaming_duration.getText())){
            streaming_duration=Float.parseFloat(txt_streaming_duration.getText());
            lbl_status_bar.setText("Egine Starting...");
            start_csparql_engine();    
            lbl_status_bar.setText("Egine Started...");
        }else{
            //custom title, warning icon
            JOptionPane.showMessageDialog(this,"Reasoning duration cannot be empty",
            "Warning!!!",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txt_streaming_durationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_streaming_durationKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar(); // Get the typed character

        // Don't ignore backspace or delete
        if (c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE) {
            // If the key was not a number then discard it (this is a sloppy way to check)
            if (!(c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9')) {
                //if point character typed increase number of pointcharacters by one
                if ((c == '.')) {
                    // If the input string already contains a decimal point, don't
                    // do anything to it.
                    if (txt_streaming_duration.getText().indexOf(".") < 0){
                        // don't consume it
                    }else{
                        evt.consume(); // Ignore this key
                        return;
                    }
                }else{
                    evt.consume(); // Ignore this key
                }
            }
        }
    }//GEN-LAST:event_txt_streaming_durationKeyTyped

    private void chck_remote_controlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chck_remote_controlItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()== ItemEvent.SELECTED){
            String added_controllers=txt_selected_controllers.getText();
            txt_selected_controllers.setText(added_controllers+"\n"+chck_remote_control.getText()); 
            remove_all_whitespace(txt_selected_controllers);
        }else{
            remove_line_from_text_area(txt_selected_controllers, chck_remote_control.getText());
            lbl_status_bar.setText("Coolant unchecked");
        }
    }//GEN-LAST:event_chck_remote_controlItemStateChanged

    private void chck_tablet_pcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chck_tablet_pcItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()== ItemEvent.SELECTED){
            String added_controllers=txt_selected_controllers.getText();
            txt_selected_controllers.setText(added_controllers+"\n"+chck_tablet_pc.getText()); 
            remove_all_whitespace(txt_selected_controllers);
        }else{
            remove_line_from_text_area(txt_selected_controllers, chck_tablet_pc.getText());
            
            lbl_status_bar.setText("Coolant unchecked");
        }
    }//GEN-LAST:event_chck_tablet_pcItemStateChanged

    private void mnuitm_load_base_ontologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitm_load_base_ontologyActionPerformed
        // TODO add your handling code here:
        load_base_ontology();
        populate_controller_list();
        populate_actuator_list();
        populate_sensor_list();
    }//GEN-LAST:event_mnuitm_load_base_ontologyActionPerformed

    private void btn_add_controllerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_controllerActionPerformed
        // TODO add your handling code here:
        String class_name=txt_add_controller.getText();
       if("".equals(class_name)){
           JOptionPane.showMessageDialog(this,"Controller name cannot be empty","Empty Value",
                JOptionPane.ERROR_MESSAGE);
        }else{
           if(!class_exist(class_name)){
               add_sub_class("Controllers", class_name);
               lbl_status_bar.setText("Controller \""+ class_name+"\" added to base ontology successfully!!!");
               lbl_status_bar.setOpaque(true);
               lbl_status_bar.setForeground(Color.BLACK);
               lbl_status_bar.setBackground(Color.GREEN);
               pnl_status_bar.setBackground(Color.GREEN);
               txt_add_controller.setText("");
               populate_controller_list();
           }else{
               JOptionPane.showMessageDialog(this,class_name+" already exits\nChoose another name","Class warning",
                    JOptionPane.WARNING_MESSAGE);
           }
       }
    }//GEN-LAST:event_btn_add_controllerActionPerformed

    private void btn_add_actuatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_actuatorActionPerformed
        // TODO add your handling code here:
        String class_name=txt_add_actuator.getText();
       if("".equals(class_name)){
           JOptionPane.showMessageDialog(this,"Actuator name cannot be empty","Empty Value",
                JOptionPane.ERROR_MESSAGE);
        }else{
           if(!class_exist(class_name)){
               add_sub_class("Actuators", class_name);
               lbl_status_bar.setText("Actuator \""+ class_name+"\" added to base ontology successfully!!!");
               lbl_status_bar.setOpaque(true);
               lbl_status_bar.setForeground(Color.BLACK);
               lbl_status_bar.setBackground(Color.GREEN);
               pnl_status_bar.setBackground(Color.GREEN);
               txt_add_actuator.setText("");
               populate_actuator_list();
           }else{
               JOptionPane.showMessageDialog(this,class_name+" already exits\nChoose another name","Class warning",
                    JOptionPane.WARNING_MESSAGE);
           }
       }
    }//GEN-LAST:event_btn_add_actuatorActionPerformed

    private void btn_add_sensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_sensorActionPerformed
        // TODO add your handling code here:
        String class_name=txt_add_sensor.getText();
       if("".equals(class_name)){
           JOptionPane.showMessageDialog(this,"Sensor name cannot be empty","Empty Value",
                JOptionPane.ERROR_MESSAGE);
        }else{
           if(!class_exist(class_name)){
               add_sub_class("PhysicalSensor", class_name);
               lbl_status_bar.setText("Sensor \""+ class_name+"\" added to base ontology successfully!!!");
               lbl_status_bar.setOpaque(true);
               lbl_status_bar.setForeground(Color.BLACK);
               lbl_status_bar.setBackground(Color.GREEN);
               pnl_status_bar.setBackground(Color.GREEN);
               txt_add_sensor.setText("");
               populate_sensor_list();
           }else{
               JOptionPane.showMessageDialog(this,class_name+" already exits\nChoose another name","Class warning",
                    JOptionPane.WARNING_MESSAGE);
           }
       }
    }//GEN-LAST:event_btn_add_sensorActionPerformed

    private void btn_remove_classActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_remove_classActionPerformed
        // TODO add your handling code here:
        String class_name=txt_remove_class.getText();
       if("".equals(class_name)){
           JOptionPane.showMessageDialog(this,"Class name cannot be empty","Empty Value",
                JOptionPane.ERROR_MESSAGE);
        }else{
           if(class_exist(class_name)){
               remove_class(class_name);
               lbl_status_bar.setText("\""+ class_name+"\" removed from base ontology successfully!!!");
               lbl_status_bar.setOpaque(true);
               lbl_status_bar.setForeground(Color.BLACK);
               lbl_status_bar.setBackground(Color.GREEN);
               pnl_status_bar.setBackground(Color.GREEN);
               txt_remove_class.setText("");
               populate_sensor_list();
               populate_actuator_list();
               populate_controller_list();
           }else{
               JOptionPane.showMessageDialog(this,class_name+" does not exist in your ontology exits\nChoose another name","Class warning",
                    JOptionPane.WARNING_MESSAGE);
           }
       }
    }//GEN-LAST:event_btn_remove_classActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.out.println("App started");
        logger = LoggerFactory.getLogger(frmHome.class);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmHome().setVisible(true);
            }
        });
    }
    
    public void start_csparql_engine(){
        try {
            inputStream=new FileInputStream(smartSpaceRDF);
            historicaldModel.read(inputStream, language_RDF);
//            System.out.println(historicaldModel);
                     //streamingModel.write(System.out, "RDF/XML");
            historicalTempValue=historicaldModel.getOntClass(BASE1+"tempValue");
            historicalHumidityValue=historicaldModel.getOntClass(BASE1+"humidityValue");
            historicalPressureValue=historicaldModel.getOntClass(BASE1+"pressureValue");
	} catch (Exception e) {
		logger.error(e.getMessage(), e);
	}
        
	RdfStream tg = null;
        RdfStream tg2 = null;
        RdfStream tg3 = null;
        RdfStream tg4 = null;
        RdfStream tg5 = null;
        RdfStream tg6 = null;
        
        JSONObject JSONAnalysis=new JSONObject();
       
        // Initialize C-SPARQL Engine
	engine = new CsparqlEngineImpl();
        engine.initialize(true);
        
        csparql_query = "REGISTER QUERY sensorValueOf AS "
        + "PREFIX smartSpace:<http://localhost:8080/smartSpace#> "
	+ "SELECT ?tempReadings ?tempValue ?pressureReadings ?pressureValue ?humidityReadings ?humidityValue "
	+ "FROM STREAM <http://localhost:8080/smartSpace/streamTemperature> [RANGE 15s STEP 2s] "
        + "FROM STREAM <http://localhost:8080/smartSpace/streamPressure> [RANGE 15s STEP 2s] "
        + "FROM STREAM <http://localhost:8080/smartSpace/streamHumididty> [RANGE 15s STEP 2s] "
        
	+ "WHERE {"
        + "?tempReadings smartSpace:hasValue ?tempValue."
        + "?pressureReadings smartSpace:hasPressureReading ?pressureValue."
        + "?humidityReadings smartSpace:hasHumidityReading ?humidityValue."
        + "}";
        
      
	tg = new temperatureStreamGenerator("http://localhost:8080/smartSpace/streamTemperature");
        tg2 = new pressureStreamGenerator("http://localhost:8080/smartSpace/streamPressure");
        tg3= new humidityStreamGenerator("http://localhost:8080/smartSpace/streamHumididty");
        tg4 = new temperatureStreamGenerator2("http://localhost:8080/smartSpace/streamTemperature");
       // tg5 = new pressureStreamGenerator2("http://localhost:8080/smartSpace/streamPressure");
        //tg6= new humidityStreamGenerator2("http://localhost:8080/smartSpace/streamHumididty");
			//			tg = new BasicIntegerRDFStreamTestGenerator("http://myexample.org/stream");
                        
        // Register an RDF Stream
        engine.registerStream(tg);
        engine.registerStream(tg2);
        engine.registerStream(tg3);
        engine.registerStream(tg4);
       // engine.registerStream(tg5);
       // engine.registerStream(tg6);
        
        t = new Thread((Runnable) tg);
	t.start();
        t2 = new Thread((Runnable) tg2);
	t2.start();
        t3 = new Thread((Runnable) tg3);
	t3.start();
        t4= new Thread((Runnable) tg4);
	t4.start();
//        final Thread t5 = new Thread((Runnable) tg5);
//	t5.start();
//        final Thread t6 = new Thread((Runnable) tg6);
//	t6.start();

        return_csparql_query_result();
    }
    
    public void return_csparql_query_result(){
        try {
            c1 = engine.registerQuery(csparql_query, false);
            logger.debug("Query: {}", csparql_query);
            logger.debug("Query Start Time : {}", System.currentTimeMillis());
        } catch (final ParseException ex) {
            logger.error(ex.getMessage(), ex);
	}
        
        beforeQuery=Instant.now();
        if (c1 != null) {
             c1.addObserver( new Observer() {
                @Override
                public void update(Observable o, Object arg) {
                    cycleCount+=1;
                    Instant afterQuery=Instant.now();
                    final Duration csparqlQueryTimeElapsed=Duration.between(beforeQuery, afterQuery);
                    System.out.println("Total Window Cycle: "+cycleCount);
                    System.out.println("CSPARQL Query Time: "+(csparqlQueryTimeElapsed.toMillis()/1000)+"."+String.format("%04d",(csparqlQueryTimeElapsed.toMillis()%1000)));
                    beforeQuery=afterQuery;
                  
                    final RDFTable rdfTable = (RDFTable) arg;
                     //System.out.println(rdfTable.toString());
                     System.out.println("");
                     final String[] vars = rdfTable.getNames().toArray(new String[]{});
                     Date date = new Date(System.currentTimeMillis()); //Input your time in milliseconds
                     String dateString = new SimpleDateFormat("dd MMM yyyy hh:mm:ss a").format(date);
                     //System.out.println("----"+rdfTable.size()+" result at SystemTime=["+dateString+"]-----");
                     System.out.println("Raw quadruples with duplicated readings: "+rdfTable.size());
                }
             });
        }
        
        try {
            System.out.println((long)(streaming_duration*60*60*1000));
            Thread.sleep((long)(streaming_duration*60*60*1000));
           
            //Thread.sleep(15*1000);
//             System.out.println(tg.getIRI());
	} catch (InterruptedException e) {
            logger.error(e.getMessage(), e);
	}
        
//        // clean up (i.e., unregister query and stream)
	engine.unregisterQuery(c1.getId());
        
	//((LBSMARDFStreamTestGenerator) tg).pleaseStop();
//        ((temperatureStreamGenerator)tg).pleaseStop();
//        ((pressureStreamGenerator)tg2).pleaseStop();
//        ((humidityStreamGenerator)tg3).pleaseStop();
//        ((temperatureStreamGenerator2)tg4).pleaseStop();
//
//
//	engine.unregisterStream(tg.getIRI());
//        engine.unregisterStream(tg2.getIRI());
//        engine.unregisterStream(tg3.getIRI());
//        engine.unregisterStream(tg4.getIRI());
//        
       
       // engine.unregisterStream(BASE);
       //System.exit(0);
    }
    
    public void remove_line_from_text_area(JTextArea txt_area,String txt_to_remove){
        for (String line : txt_area.getText().split("\\n")){
            if(line.equalsIgnoreCase(txt_to_remove))
                txt_area.setText(txt_area.getText().replace(line,""));
        }
        remove_all_whitespace(txt_area);
    }
    
    public void remove_all_whitespace(JTextArea txt_area){
         txt_area.setText(txt_area.getText().trim());
    }
    
    public void load_base_ontology(){
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            base_ontlogy_URI=selectedFile.getAbsolutePath();
            System.out.println("Base ontology URI: " + selectedFile.getAbsolutePath());
            is_base_ontology_loaded=true;
        }
    }
    
    public boolean class_exist(String class_name){
        Resource resource = ResourceFactory.createProperty(BASE1,class_name);
        if(base_ontology.containsResource(resource))
            return true;
        else 
            return false;
    }
    
    public void add_sub_class (String super_class, String subclass){
         try{
            superClass=base_ontology.getOntClass(BASE1+super_class);
            OntClass childCategoryClass = base_ontology.createClass(BASE1 + subclass);
//             System.out.println(superClass.isClass());
            superClass.addSubClass(childCategoryClass);
//            System.out.println("i added sub class : "+childCategoryClass.getURI());
            OutputStream out_stream =new FileOutputStream(base_ontlogy_URI);
            base_ontology.write(out_stream, language_RDF);
            base_ontology.write(System.out, language_RDF);
             System.out.println(subclass+" saved");
         }catch(Exception ex){
             System.err.println(ex.toString());
         }
    }
    
    public void remove_class(String class_name){
        try{
            OntClass class_to_remove=base_ontology.getOntClass(BASE1 + class_name);
            class_to_remove.remove();
            OutputStream out_stream =new FileOutputStream(base_ontlogy_URI);
            base_ontology.write(out_stream, language_RDF);
            base_ontology.write(System.out, language_RDF);
            System.out.println(class_name+" removed");
        }catch(Exception ex){
            System.err.println(ex.toString());
        }
    }
    
    public void populate_controller_list(){
        try{
            cmb_controller_list.removeAllItems();
            base_ontology=ModelFactory.createOntologyModel(OntModelSpec.RDFS_MEM);
            inputStream=new FileInputStream(base_ontlogy_URI); 
            base_ontology.read(inputStream,BASE1,language_RDF); 
//            "PREFIX owl: <http://www.w3.org/2002/07/owl#>"+
//                    "SELECT ?class WHERE { ?class a owl:Class }";
            
            String nullCheckQuery=  "PREFIX owl: <http://www.w3.org/2002/07/owl#>"+
                "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"+
                "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"+
                "PREFIX smartSpace: <http://localhost:8080/smartSpace/>"+
                "SELECT ?entity WHERE { ?entity rdfs:subClassOf smartSpace:Controllers}";
            
            Query query=QueryFactory.create(nullCheckQuery);
            QueryExecution qexec=QueryExecutionFactory.create(query, base_ontology);
            ResultSet rs=qexec.execSelect();
            while(rs.hasNext()){
                QuerySolution solution=rs.nextSolution();
                cmb_controller_list.addItem(solution.getResource("entity").getLocalName());
            }
        }catch(Exception ex){
            System.err.println(ex.toString());
        }
    }
    
    public void populate_actuator_list(){
        try{
            cmb_actuator_list.removeAllItems();
            base_ontology=ModelFactory.createOntologyModel(OntModelSpec.RDFS_MEM);
            inputStream=new FileInputStream(base_ontlogy_URI); 
            base_ontology.read(inputStream,BASE1,language_RDF); 
//            "PREFIX owl: <http://www.w3.org/2002/07/owl#>"+
//                    "SELECT ?class WHERE { ?class a owl:Class }";
            
            String nullCheckQuery=  "PREFIX owl: <http://www.w3.org/2002/07/owl#>"+
                "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"+
                "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"+
                "PREFIX smartSpace: <http://localhost:8080/smartSpace/>"+
                "SELECT ?entity WHERE { ?entity rdfs:subClassOf smartSpace:Actuators}";
            
            Query query=QueryFactory.create(nullCheckQuery);
            QueryExecution qexec=QueryExecutionFactory.create(query, base_ontology);
            ResultSet rs=qexec.execSelect();
            while(rs.hasNext()){
                QuerySolution solution=rs.nextSolution();
                cmb_actuator_list.addItem(solution.getResource("entity").getLocalName());
            }
        }catch(Exception ex){
            System.err.println(ex.toString());
        }
    }
    
     public void populate_sensor_list(){
        try{
            cmb_sensor_list.removeAllItems();
            base_ontology=ModelFactory.createOntologyModel(OntModelSpec.RDFS_MEM);
            inputStream=new FileInputStream(base_ontlogy_URI); 
            base_ontology.read(inputStream,BASE1,language_RDF); 
//            "PREFIX owl: <http://www.w3.org/2002/07/owl#>"+
//                    "SELECT ?class WHERE { ?class a owl:Class }";
            
            String nullCheckQuery=  "PREFIX owl: <http://www.w3.org/2002/07/owl#>"+
                "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"+
                "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"+
                "PREFIX smartSpace: <http://localhost:8080/smartSpace/>"+
                "SELECT ?entity WHERE { ?entity rdfs:subClassOf smartSpace:PhysicalSensor}";
            
            Query query=QueryFactory.create(nullCheckQuery);
            QueryExecution qexec=QueryExecutionFactory.create(query, base_ontology);
            ResultSet rs=qexec.execSelect();
            while(rs.hasNext()){
                QuerySolution solution=rs.nextSolution();
                cmb_sensor_list.addItem(solution.getResource("entity").getLocalName());
            }
        }catch(Exception ex){
            System.err.println(ex.toString());
        }
    }
     
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add_actuator;
    private javax.swing.JButton btn_add_controller;
    private javax.swing.JButton btn_add_more_controller;
    private javax.swing.JButton btn_add_sensor;
    private javax.swing.JButton btn_remove_class;
    private javax.swing.JButton btn_remove_controller;
    private javax.swing.JCheckBox chck_compsite_device;
    private javax.swing.JCheckBox chck_coolant;
    private javax.swing.JCheckBox chck_door_control;
    private javax.swing.JCheckBox chck_door_leaking;
    private javax.swing.JCheckBox chck_heat_regulator;
    private javax.swing.JCheckBox chck_remote_control;
    private javax.swing.JCheckBox chck_tablet_pc;
    private javax.swing.JCheckBox chck_window_control;
    private javax.swing.JCheckBox chck_window_leaking;
    private javax.swing.JComboBox<String> cmb_actuator_list;
    private javax.swing.JComboBox<String> cmb_controller_list;
    private javax.swing.JComboBox<String> cmb_sensor_list;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JLabel lbl_status_bar;
    private javax.swing.JMenuItem mnuItmStartStreamer;
    private javax.swing.JMenuItem mnuitm_load_base_ontology;
    private javax.swing.JPanel pnl_status_bar;
    private javax.swing.JTextField txt_add_actuator;
    private javax.swing.JTextField txt_add_controller;
    private javax.swing.JTextField txt_add_sensor;
    private javax.swing.JTextField txt_remove_class;
    private javax.swing.JTextField txt_remove_controller;
    private javax.swing.JTextArea txt_selected_controllers;
    private javax.swing.JTextField txt_streaming_duration;
    // End of variables declaration//GEN-END:variables
}
